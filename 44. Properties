/* PROPERTIES 

Properties is declared like a field, but with a 'get/set' block added. */

// Example (How to implement 'CurrentPrice' as a property):


public class Stock
{
	decimal currentPrice;            // The private "backing" field
	
	pubic decimal CurrentPrice       // The public property
	{
		get 
		{ 
			return currentPrice; 
		}
		
		set
		{
			currentPrice = value; 
		}
	}
}


// 'get' accessor runs when the property is read. It must return the property's type.   (If only have 'get', property is read-only)

// 'set' accessor runs when the property is assigned.           (If only have 'set', property is write-only - rarely used)



/* Even though properties are accessed the same way as fields, 
they give the implementer complete control over getting and setting its values.  */



/* Properties allow the following modifiers: 

- Static modifier: static

- Access modifiers: public, internal, private, protected 

- Inheritance modifiers: new, virtual, abstract, override, sealed 

- Unmanaged code modifiers: unsafe, extern
