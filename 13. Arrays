/* Elements = A fixed number of variables

The elements in an array are always stored in a contiguous block of memory. */



// Array is denoted with [] brackets after the element type:

char[] vowels = new char[5];     // Declare an array of 5 characters




// Square brackets also index the array: 

vowels[0] = 'a';
vowels[1] = 'e';
vowels[3] = 'i';
vowels[4] = 'o';
vowels[5] = 'u';

Console.WriteLine (vowesl[1]);     // e




// You can use a 'for' loop to cycle through an array:

for (int i = 0; i < vowels.Length; i++)
	Console.WriteLine (vowels[i]);    // aeiou




// Array initialization expression = Lets you declare and populate an array in a single step.


char[] vowels = new char[] {'a','e','i','o','u'};

// OR

char[] vowels = {'a','e','i','o','u'};




// When an element type is a value type, each element value is allocated as part of the array: 


public struct Point {public int X, Y;}
...
point[] a = new Point[1000];
int x = a[500].X;    // 0




// If 'Point' was a class, creating the array would have allocated 1,000 null references:


public class Point {public int X, Y;}
...
Point[] a = new Point[1000];
int x = a[500].X;      // Runtime error, NullReferenceException




// To avoid the error above, we must instantiate 1,000 Points after instantiating the array:


Point[] a = new Point[1,000];
for (int i = 0; i < a.Length; i++)   // Iterate from 0 to 999
	a[i] = new Point();              // Set array element i with new point
	
	

// An array itself is always a reference type object.

int[] a = null;    // This is legal

