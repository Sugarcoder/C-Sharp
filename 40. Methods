/* METHODS

A method performs an action in a series of statements.

A method can receive input data from the caller by specifying parameters 
and output data back to the caller by specifying a return type.

A method can specify a 'void' return type (it doesn't return any value to its caller).

A method's signature comprises its name and parameter types. */


/* Methods allow the following modifiers:

- Static modifier: static

- Access modifier: public, internal, private, protected

- Inheritance modifier: new, virtual, abstract, override, sealed

- Partial method modifier: partial

- Unmanaged code modifier: unsafe extern  */




/*** OVERLOADING METHODS ***/

/* A type may overload methods (have multiple methods with the same name),
   as long as the signatures are different. */
   
// Example: 

void Foo (int x) {...}
void Foo (double x) {...}
void Foo (int x, float y) {...}
void Foo (float x, int y) {...}


/* The example below would cause a 'compile-time error', because
the return type and params modifier are not part of a method's signature:  */


void Foo (int x) {...}
float Foo (int x) {...}             // Compile-time error

void Goo (int[]x) {...}
void Goo (params int[] x) {...}     // Compile-time error




/*** Pass-by-value vs. Pass-by-reference 
     (Both are a part of the signature) ***/


/* Foo(int) can coexist with Foo(ref int) or Foo(out int).
	But Foo(ref int) cannot coexist with Foo(out int).  */
	
// Example: 

void Foo (int x) {...}
void Foo (ref int x) {...}     // It works so far
void Foo (out int x) {...}     // Compile-time error
