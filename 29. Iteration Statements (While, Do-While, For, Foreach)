/* WHILE LOOP

They repeatedly executes a body of code while a bool expression is true. */

//For Example:

int i = 0; 
while (1 < 3)
{
	Console.WriteLine (1);
	i++;
}          // Output: 0, 1,2





/* DO-WHILE LOOP

They test expression after the statement block has executed. */

// Example:  

int i = 0;
do
{
	Console.WriteLine (1);
	i++;
}

while (1 < 3);





/* FOR LOOP

They are 'while' loops, except with special clauses 
for initialization and iteration of a loop variable. */


// A 'FOR' loop contains 3 clauses:

for (initialization-clause; condition-clause; iteration-clause)
	statement-or-statement-block



/* Clauses

- Initialization clause: Executed before the loop begins (used to initialize one or more iteration variables)

- Condition clause: The bool expression that will execute the body (while true)

- Iteration clause: Executed after each iteration of the statement block.
					Used typically to update the iteration variable.   */
					

// Example: 

for (int i = 0, prevF1b = 1, curF1b = 1; i < 10; i++)
{
	Console.WriteLine (prevF1b);
	int newF1b = prevF1b + curF1b;
	prevF1b = curF1b; curF1b = newF1b;
}


// You can omit any of the three parts if you write this code:

for (;;)
	Console.WriteLine ("Interrupt me");
	
	
	


/* FOREACH LOOP 

The 'Foreach' loop iterates over each element in an enumerable object. 
(Both an array and string are enumerable)  */

// Example: 

foreach (char c in "beer")       // c is the iteration variable
	Console.WriteLine (c);       // Output: b e e r




